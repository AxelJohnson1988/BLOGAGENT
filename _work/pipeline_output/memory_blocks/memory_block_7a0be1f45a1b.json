{
  "id_hash": "7a0be1f45a1b",
  "summary": "# MUSE Pantheon Universal Ingest Pipeline\n\n## Overview\n\nAI coding agents working in this repository should understand that this is the **MUSE Pantheon Universal Ingest Pipeline** - a comprehensive system for converting any file format into structured, semantic MemoryBlocks for AI agent memory systems.\n\n## Core Architecture\n\n### Memory Block System\n- **Atomic, immutable, sovereign, semantic** memory blocks are the foundation\n- Schema defined in `common/memory_block.py` with 12 archetypes: Discoverer, Guardian, Alchemist, Oracle, Sage, Shaman, Visionary, Architect, Weaver, Navigator, Storyteller, Scribe\n- Ethics tracking built-in: `pii_redacted`, `consent_logged`, `ethics_review`\n- Each block has: `id_hash`, `summary`, `content`, `topics`, `skills`, `archetype`, `project`\n\n### Pipeline Flow\n1. **Universal Ingest** (`warden/tools/universal_ingest.py`) - Processes any file type\n2.",
  "content": "# MUSE Pantheon Universal Ingest Pipeline\n\n## Overview\n\nAI coding agents working in this repository should understand that this is the **MUSE Pantheon Universal Ingest Pipeline** - a comprehensive system for converting any file format into structured, semantic MemoryBlocks for AI agent memory systems.\n\n## Core Architecture\n\n### Memory Block System\n- **Atomic, immutable, sovereign, semantic** memory blocks are the foundation\n- Schema defined in `common/memory_block.py` with 12 archetypes: Discoverer, Guardian, Alchemist, Oracle, Sage, Shaman, Visionary, Architect, Weaver, Navigator, Storyteller, Scribe\n- Ethics tracking built-in: `pii_redacted`, `consent_logged`, `ethics_review`\n- Each block has: `id_hash`, `summary`, `content`, `topics`, `skills`, `archetype`, `project`\n\n### Pipeline Flow\n1. **Universal Ingest** (`warden/tools/universal_ingest.py`) - Processes any file type\n2. **Clustering & Embeddings** (`warden/tools/cluster_embeddings.py`) - TF-IDF + K-means \n3. **Project Assignment** (`warden/tools/assign_projects.py`) - Auto-assigns based on content/archetype\n4. **Orchestration** (`warden/tools/run_full_pipeline.py`) - Coordinates all phases\n\n## Key Workflows\n\n### Running the Pipeline\n```bash\n# Quick start (recommended)\n./run_pipeline.py --scan-root /path/to/files --apply\n\n# Full control\npython warden/tools/run_full_pipeline.py --roots /path/to/files --types .py .md .json\n\n# Validation only\npython warden/tools/run_full_pipeline.py --validate-only\n```\n\n### Output Structure\n```\n_work/pipeline_output/\n├── memory_blocks/           # Individual MemoryBlock JSON files\n├── clustering_results/      # Semantic clusters + interactive visualization\n├── project_assignments/     # Project hierarchies + updated blocks\n└── pipeline_summary.txt     # Human-readable execution report\n```\n\n## Project-Specific Patterns\n\n### File Processing Extensibility\n- `UniversalFileProcessor` in `universal_ingest.py` supports OCR (images), PDF parsing, archive extraction\n- Missing dependencies gracefully degrade (e.g., no Tesseract = metadata-only for images)\n- Each processor creates MemoryBlocks via `MemoryBlockFactory.create_from_file()`\n\n### Archetype-Project Mapping\n- **Guardian/Warden**: Security, monitoring, ethics systems\n- **Oracle/Sage**: AI assistants, data analytics, knowledge systems  \n- **Scribe/Storyteller**: Blog content, documentation, creative work\n- **Alchemist/Architect**: Development tools, code analysis, system building\n- **Visionary**: Creative content, media processing, design systems\n\n### Error Handling Philosophy\n- **Resilient processing**: Individual file failures don't stop the pipeline\n- **Graceful degradation**: Missing dependencies still produce metadata MemoryBlocks\n- **Comprehensive logging**: All errors logged but pipeline continues\n\n## Integration Points\n\n### External Dependencies (Optional)\n- **OCR**: `pytesseract` + `PIL` for image text extraction\n- **PDF**: `PyPDF2` or `pdfplumber` for document processing  \n- **Video**: `cv2` for metadata extraction\n- **Audio**: `mutagen` for metadata extraction\n\n### Memory System Integration\n- MemoryBlocks are immutable once created (identified by `id_hash`)\n- Clustering creates semantic relationships between blocks\n- Project assignment enables multi-domain organization\n- All output is JSON-serializable for downstream AI agent consumption\n\n## Getting Started for AI Agents\n\n1. **Validate environment**: `python warden/tools/run_full_pipeline.py --validate-only`\n2. **Test with sample data**: `./run_pipeline.py --scan-root . --types .py .md`\n3. **View results**: Check `_work/pipeline_output/cluster_visualization.html`\n4. **Integrate**: Load MemoryBlocks from `_work/pipeline_output/memory_blocks/*.json`\n\nThe system is designed for **immediate productivity** - run the pipeline on any directory and get structured, semantic memory blocks ready for AI agent ingestion and retrieval.",
  "topics": [
    "copilot-instructions",
    "pipeline",
    "memory",
    "system",
    "file",
    "memoryblocks",
    "md"
  ],
  "skills": [
    "nano_warden_universal_ingest_md.py",
    "nano_warden_memory_system.py"
  ],
  "date": "2025-09-17",
  "project": "general.development",
  "archetype": "Scribe",
  "created_at": "2025-09-17T18:19:13.046245+00:00",
  "source_path": ".github/copilot-instructions.md",
  "file_type": ".md",
  "pii_redacted": false,
  "consent_logged": true,
  "ethics_review": "passed",
  "links": [],
  "parent_blocks": [],
  "metadata": {
    "file_size": 3911,
    "source": "file_ingest",
    "validation_status": "passed"
  }
}